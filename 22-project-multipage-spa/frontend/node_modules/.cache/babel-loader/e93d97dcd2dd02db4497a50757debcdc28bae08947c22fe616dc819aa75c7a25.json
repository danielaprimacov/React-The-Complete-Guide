{"ast":null,"code":"var _jsxFileName = \"D:\\\\Job\\\\Courses\\\\React M.Schwarzmuller\\\\22-project-multipage-spa\\\\frontend\\\\src\\\\pages\\\\EventDetail.js\",\n  _s = $RefreshSig$();\nimport { Await, redirect, useRouteLoaderData } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventDetailPage() {\n  _s();\n  const {\n    event,\n    events\n  } = useRouteLoaderData(\"event-detail\");\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Await, {\n      resolve: event,\n      children: loadedEvent => /*#__PURE__*/_jsxDEV(EventItem, {\n        event: loadedEvent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 27\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Await, {\n      resolve: events,\n      children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n        events: loadedEvents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 28\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(EventDetailPage, \"RYHFM3+vnAtCT3vK8ii1+i0+Nsk=\", false, function () {\n  return [useRouteLoaderData];\n});\n_c = EventDetailPage;\nexport default EventDetailPage;\nasync function loadEvent(id) {\n  const response = await fetch(\"http://localhost:8080/events/\" + id);\n  if (!response.ok) {\n    throw new Response(JSON.stringify({\n      message: \"Could not fetch details for selected event\"\n    }), {\n      stauts: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData.events;\n  }\n}\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    //return { isError: true, message: \"Could not fetch events!\" };\n    throw new Response(JSON.stringify({\n      message: \"Could not fetch events.\"\n    }), {\n      status: 500\n    });\n  } else {\n    /*const res = new Response(\"any data\", { status: 201 }); // response constructor\r\n    return res;*/\n    const resData = await response.json();\n    return resData.events;\n  }\n}\nexport async function loader({\n  request,\n  params\n}) {\n  const id = params.eventId;\n  return {\n    event: loadEvent(id),\n    events: loadEvents()\n  };\n}\nexport async function action({\n  params,\n  request\n}) {\n  const eventId = params.eventId;\n  const response = await fetch(\"http://localhost:8080/events/\" + eventId, {\n    method: request.method\n  });\n  if (!response.ok) {\n    throw new Response(JSON.stringify({\n      message: \"Could not delete event.\"\n    }), {\n      status: 500\n    });\n  }\n  return redirect(\"/events\");\n}\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["Await","redirect","useRouteLoaderData","EventItem","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventDetailPage","_s","event","events","children","resolve","loadedEvent","fileName","_jsxFileName","lineNumber","columnNumber","loadedEvents","_c","loadEvent","id","response","fetch","ok","Response","JSON","stringify","message","stauts","resData","json","loadEvents","status","loader","request","params","eventId","action","method","$RefreshReg$"],"sources":["D:/Job/Courses/React M.Schwarzmuller/22-project-multipage-spa/frontend/src/pages/EventDetail.js"],"sourcesContent":["import { Await, redirect, useRouteLoaderData } from \"react-router-dom\";\r\n\r\nimport EventItem from \"../components/EventItem\";\r\nimport EventsList from \"../components/EventsList\";\r\n\r\nfunction EventDetailPage() {\r\n  const { event, events } = useRouteLoaderData(\"event-detail\");\r\n\r\n  return (\r\n    <>\r\n      <Await resolve={event}>\r\n        {(loadedEvent) => <EventItem event={loadedEvent} />}\r\n      </Await>\r\n      <Await resolve={events}>\r\n        {(loadedEvents) => <EventsList events={loadedEvents} />}\r\n      </Await>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EventDetailPage;\r\n\r\nasync function loadEvent(id) {\r\n  const response = await fetch(\"http://localhost:8080/events/\" + id);\r\n\r\n  if (!response.ok) {\r\n    throw new Response(\r\n      JSON.stringify({ message: \"Could not fetch details for selected event\" }),\r\n      { stauts: 500 }\r\n    );\r\n  } else {\r\n    const resData = await response.json();\r\n    return resData.events;\r\n  }\r\n}\r\n\r\nasync function loadEvents() {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n\r\n  if (!response.ok) {\r\n    //return { isError: true, message: \"Could not fetch events!\" };\r\n    throw new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\r\n      status: 500,\r\n    });\r\n  } else {\r\n    /*const res = new Response(\"any data\", { status: 201 }); // response constructor\r\n    return res;*/\r\n    const resData = await response.json();\r\n    return resData.events;\r\n  }\r\n}\r\n\r\nexport async function loader({ request, params }) {\r\n  const id = params.eventId;\r\n\r\n  return {\r\n    event: loadEvent(id),\r\n    events: loadEvents(),\r\n  };\r\n}\r\n\r\nexport async function action({ params, request }) {\r\n  const eventId = params.eventId;\r\n  const response = await fetch(\"http://localhost:8080/events/\" + eventId, {\r\n    method: request.method,\r\n  });\r\n\r\n  if (!response.ok) {\r\n    throw new Response(JSON.stringify({ message: \"Could not delete event.\" }), {\r\n      status: 500,\r\n    });\r\n  }\r\n  return redirect(\"/events\");\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}