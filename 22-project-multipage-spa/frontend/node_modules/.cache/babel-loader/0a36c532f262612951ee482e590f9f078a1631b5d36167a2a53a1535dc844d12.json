{"ast":null,"code":"var _jsxFileName = \"D:\\\\Job\\\\Courses\\\\React M.Schwarzmuller\\\\22-project-multipage-spa\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, defer, Await } from \"react-router-dom\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Await, {\n    resolve: events,\n    children: () => {}\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 10\n  }, this);\n}\n_s(EventsPage, \"xTcuS98fsVcq20se00iLm8bDBmQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch(\"http://localhost:8080/events\");\n  if (!response.ok) {\n    //return { isError: true, message: \"Could not fetch events!\" };\n    throw new Response(JSON.stringify({\n      message: \"Could not fetch events.\"\n    }), {\n      status: 500\n    });\n  } else {\n    /*const res = new Response(\"any data\", { status: 201 }); // response constructor\r\n    return res;*/\n    return response;\n  }\n}\nexport function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","defer","Await","EventsList","jsxDEV","_jsxDEV","EventsPage","_s","events","resolve","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","Response","JSON","stringify","message","status","loader","$RefreshReg$"],"sources":["D:/Job/Courses/React M.Schwarzmuller/22-project-multipage-spa/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData, defer, Await } from \"react-router-dom\";\r\n\r\nimport EventsList from \"../components/EventsList\";\r\n\r\nfunction EventsPage() {\r\n  const { events } = useLoaderData();\r\n\r\n  return <Await resolve={events}>\r\n  {() => {}}\r\n  </Await>;\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nasync function loadEvents() {\r\n  const response = await fetch(\"http://localhost:8080/events\");\r\n\r\n  if (!response.ok) {\r\n    //return { isError: true, message: \"Could not fetch events!\" };\r\n    throw new Response(JSON.stringify({ message: \"Could not fetch events.\" }), {\r\n      status: 500,\r\n    });\r\n  } else {\r\n    /*const res = new Response(\"any data\", { status: 201 }); // response constructor\r\n    return res;*/\r\n    return response;\r\n  }\r\n}\r\n\r\nexport function loader() {\r\n  return defer({\r\n    events: loadEvents(),\r\n  });\r\n}\r\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AAE9D,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAAEC;EAAO,CAAC,GAAGR,aAAa,CAAC,CAAC;EAElC,oBAAOK,OAAA,CAACH,KAAK;IAACO,OAAO,EAAED,MAAO;IAAAE,QAAA,EAC7BA,CAAA,KAAM,CAAC;EAAC;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AACV;AAACP,EAAA,CANQD,UAAU;EAAA,QACEN,aAAa;AAAA;AAAAe,EAAA,GADzBT,UAAU;AAQnB,eAAeA,UAAU;AAEzB,eAAeU,UAAUA,CAAA,EAAG;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA,MAAM,IAAIC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAE;IAA0B,CAAC,CAAC,EAAE;MACzEC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC,MAAM;IACL;AACJ;IACI,OAAOP,QAAQ;EACjB;AACF;AAEA,OAAO,SAASQ,MAAMA,CAAA,EAAG;EACvB,OAAOxB,KAAK,CAAC;IACXO,MAAM,EAAEQ,UAAU,CAAC;EACrB,CAAC,CAAC;AACJ;AAAC,IAAAD,EAAA;AAAAW,YAAA,CAAAX,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}