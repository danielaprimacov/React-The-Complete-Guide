{"ast":null,"code":"var _jsxFileName = \"D:\\\\Job\\\\Courses\\\\React M.Schwarzmuller\\\\20-redux-project\\\\src\\\\components\\\\Counter.js\",\n  _s = $RefreshSig$();\nimport { Component } from \"react\";\nimport { useSelector, useDispatch, connect } from \"react-redux\";\nimport { counterActions } from \"../store/index\";\nimport classes from \"./Counter.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Counter = () => {\n  _s();\n  // return a function - dispatch an action agains our Redux store\n  const dispatch = useDispatch();\n\n  // which piece of data we want to store\n  const counter = useSelector(state => state.counter.co);\n  const show = useSelector(state => state.showCounter);\n  const incrementHandler = () => {\n    dispatch(counterActions.increment());\n  };\n  const increaseHandler = () => {\n    dispatch(counterActions.increase(10));\n  };\n  const decrementHandler = () => {\n    dispatch(counterActions.decrement());\n  };\n  const toggleCounterHandler = () => {\n    dispatch(counterActions.toggleCounter());\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: classes.counter,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Redux Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), show && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.value,\n      children: counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: incrementHandler,\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: increaseHandler,\n        children: \"Increase by 10\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: decrementHandler,\n        children: \"Decrement\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleCounterHandler,\n      children: \"Toggle Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(Counter, \"a6W6bcAuHVADZPU2xn93xNQZltc=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = Counter;\nexport default Counter;\n\n/*class Counter extends Component {\n  incrementHandler() {\n    this.props.increment();\n  }\n\n  decrementHandler() {\n    this.props.decrement();\n  }\n\n  toggleCounterHandler() {}\n\n  render() {\n    return (\n      <main className={classes.counter}>\n        <h1>Redux Counter</h1>\n        <div className={classes.value}>{this.props.counter}</div>\n        <div>\n          <button onClick={this.incrementHandler.bind(this)}>Increment</button>\n          <button onClick={this.decrementHandler.bind(this)}>Decrement</button>\n        </div>\n        <button onClick={this.toggleCounterHandler}>Toggle Counter</button>\n      </main>\n    );\n  }\n}\n\n// arguments to connect function\n// 1 - maps Redux state to props which will be received in Counter Components\nconst mapStateToProps = (state) => {\n  return {\n    counter: state.counter,\n  };\n};\n\n// 2 - maps Redux action to props\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    increment: () => dispatch({ type: \"increment\" }),\n    decrement: () => dispatch({ type: \"decrement\" }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);\n// connect - higher order Component - helps to connect class-based Components to the Redux\n*/\nvar _c;\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"names":["Component","useSelector","useDispatch","connect","counterActions","classes","jsxDEV","_jsxDEV","Counter","_s","dispatch","counter","state","co","show","showCounter","incrementHandler","increment","increaseHandler","increase","decrementHandler","decrement","toggleCounterHandler","toggleCounter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onClick","_c","$RefreshReg$"],"sources":["D:/Job/Courses/React M.Schwarzmuller/20-redux-project/src/components/Counter.js"],"sourcesContent":["import { Component } from \"react\";\nimport { useSelector, useDispatch, connect } from \"react-redux\";\n\nimport { counterActions } from \"../store/index\";\nimport classes from \"./Counter.module.css\";\n\nconst Counter = () => {\n  // return a function - dispatch an action agains our Redux store\n  const dispatch = useDispatch();\n\n  // which piece of data we want to store\n  const counter = useSelector((state) => state.counter.co);\n  const show = useSelector((state) => state.showCounter);\n\n  const incrementHandler = () => {\n    dispatch(counterActions.increment());\n  };\n\n  const increaseHandler = () => {\n    dispatch(counterActions.increase(10));\n  };\n\n  const decrementHandler = () => {\n    dispatch(counterActions.decrement());\n  };\n\n  const toggleCounterHandler = () => {\n    dispatch(counterActions.toggleCounter());\n  };\n\n  return (\n    <main className={classes.counter}>\n      <h1>Redux Counter</h1>\n      {show && <div className={classes.value}>{counter}</div>}\n      <div>\n        <button onClick={incrementHandler}>Increment</button>\n        <button onClick={increaseHandler}>Increase by 10</button>\n        <button onClick={decrementHandler}>Decrement</button>\n      </div>\n      <button onClick={toggleCounterHandler}>Toggle Counter</button>\n    </main>\n  );\n};\n\nexport default Counter;\n\n/*class Counter extends Component {\n  incrementHandler() {\n    this.props.increment();\n  }\n\n  decrementHandler() {\n    this.props.decrement();\n  }\n\n  toggleCounterHandler() {}\n\n  render() {\n    return (\n      <main className={classes.counter}>\n        <h1>Redux Counter</h1>\n        <div className={classes.value}>{this.props.counter}</div>\n        <div>\n          <button onClick={this.incrementHandler.bind(this)}>Increment</button>\n          <button onClick={this.decrementHandler.bind(this)}>Decrement</button>\n        </div>\n        <button onClick={this.toggleCounterHandler}>Toggle Counter</button>\n      </main>\n    );\n  }\n}\n\n// arguments to connect function\n// 1 - maps Redux state to props which will be received in Counter Components\nconst mapStateToProps = (state) => {\n  return {\n    counter: state.counter,\n  };\n};\n\n// 2 - maps Redux action to props\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    increment: () => dispatch({ type: \"increment\" }),\n    decrement: () => dispatch({ type: \"decrement\" }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);\n// connect - higher order Component - helps to connect class-based Components to the Redux\n*/\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}